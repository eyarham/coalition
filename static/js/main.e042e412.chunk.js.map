{"version":3,"sources":["ParkPanel.js","auth/LoggedIn.js","auth/LogInPanel.js","auth/AuthPanel.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","ParkPanel","useState","parks","setParks","newParkName","setNewParkName","addPark","e","a","preventDefault","writeParkData2","getParkData","getDocs","collection","querySnapshot","docs","name","addDoc","docRef","console","log","id","error","map","park","i","data","onSubmit","onChange","target","value","type","onClick","auth","getAuth","LoggedIn","loggedInUser","setLoggedInUser","onAuthStateChanged","user","email","signOut","then","catch","LoginPanel","setEmail","password","setPassword","loginErrorMessage","setLoginErrorMessage","placeholder","signInWithEmailAndPassword","userCredential","errorMessage","message","createUserWithEmailAndPassword","AuthPanel","App","className","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e042e412.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { getDocs } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCbf69wqSQcMxJ9shK8cqqIw2TeL4z8flg\",\n  authDomain: \"fir-boilerplate-6fda0.firebaseapp.com\",\n  projectId: \"fir-boilerplate-6fda0\",\n  storageBucket: \"fir-boilerplate-6fda0.appspot.com\",\n  messagingSenderId: \"111931837766\",\n  appId: \"1:111931837766:web:d5cd2ca39dc35c99742947\"\n};\n\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n\n\nconst ParkPanel = () => {\n  const [parks, setParks] = useState([]);\n  const [newParkName, setNewParkName] = useState('');\n\n  const addPark = async (e) => {\n    e.preventDefault();\n    await writeParkData2(newParkName);\n  }\n  const newParkNameChange = (e) => {\n    setNewParkName(e.target.value);\n  }\n  const getParkData = async () => {\n    const querySnapshot = await getDocs(collection(db, \"parks\"));\n    setParks(querySnapshot.docs);\n    // querySnapshot.forEach((doc) => {\n    //   setParks([...parks, doc.data()]);\n    //   console.log(`${doc.id} => ${doc.data()}`);\n    // });\n\n  }\n\n  const writeParkData2 = async (name) => {\n    try {\n      const docRef = await addDoc(collection(db, \"parks\"), {\n        name\n      });\n      console.log(\"Document written with ID: \", docRef.id);\n    } catch (e) {\n      console.error(\"Error adding document: \", e);\n    }\n  }\n  return (\n    <div>\n      {parks && parks.map((park, i) => { return (<div key={i}>{park.data().name}</div>) })}\n      Add New Park\n      <form onSubmit={addPark}>\n        <input onChange={newParkNameChange} value={newParkName}></input>\n        <input type=\"submit\" />\n\n      </form>\n      <input type=\"button\" value=\"getparkdata\" onClick={getParkData} />\n    </div>\n  )\n}\n\nexport default ParkPanel\n","import React from 'react'\nimport { useState } from 'react';\nimport { getAuth, signOut, onAuthStateChanged } from \"firebase/auth\";\n\nconst auth = getAuth();\n\nfunction LoggedIn() {\n  const [loggedInUser, setLoggedInUser] = useState();\n  onAuthStateChanged(auth, (user) => {\n    if (user) {\n      // User is signed in, see docs for a list of available properties\n      // https://firebase.google.com/docs/reference/js/firebase.User\n      //const uid = user.uid;\n      setLoggedInUser(user);\n      // ...\n    } else {\n      // User is signed out\n      // ...\n      setLoggedInUser(null);\n    }\n  });\n  const signOutEvent = () => {\n    signOut(auth).then(() => {\n      // Sign-out successful.\n    }).catch((error) => {\n      // An error happened.\n    });\n  }\n\n  return (\n    <div>\n      {loggedInUser &&\n        <div>{loggedInUser.email}</div>\n      }\n      <input type=\"button\" onClick={signOutEvent} value=\"Sign Out\"></input>\n    </div>\n  )\n}\n\nexport default LoggedIn\n","import React from 'react'\nimport { useState } from 'react';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\n\nconst auth = getAuth();\n\nfunction LoginPanel() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loggedInUser, setLoggedInUser] = useState();\n  const [loginErrorMessage, setLoginErrorMessage] = useState();\n  onAuthStateChanged(auth, (user) => {\n    if (user) {\n      // User is signed in, see docs for a list of available properties\n      // https://firebase.google.com/docs/reference/js/firebase.User\n      //const uid = user.uid;\n      setLoggedInUser(user);\n      // ...\n    } else {\n      // User is signed out\n      // ...\n      setLoggedInUser(null);\n    }\n  });\n  const createAccount = () => {\n    createUserWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        // Signed in \n        // const user = userCredential.user;\n        // ...\n      })\n      .catch((error) => {\n        //const errorCode = error.code;\n        const errorMessage = error.message;\n        setLoginErrorMessage(errorMessage);\n        // ..\n      });\n\n  }\n  const signIn = () => {\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        // Signed in \n        //const user = userCredential.user;\n        // ...\n      })\n      .catch((error) => {\n        //const errorCode = error.code;\n        const errorMessage = error.message;\n        setLoginErrorMessage(errorMessage);\n      });\n\n  }\n  const changeEmail = (e) => {\n    setEmail(e.target.value);\n  }\n  const changePassword = (e) => {\n    setPassword(e.target.value);\n  }\n  return (\n    <div>\n      {loggedInUser &&\n        <div>{loggedInUser.email}</div>\n      }\n      {(!loggedInUser) && \"no user\"}\n      <input placeholder=\"email\" onChange={changeEmail}></input>\n      <input type=\"password\" placeholder=\"password\" onChange={changePassword}></input>\n      <input type=\"button\" onClick={signIn} value=\"Sign In\"></input>\n      <input type=\"button\" onClick={createAccount} value=\"Create New User\"></input>\n      <div>{loginErrorMessage}</div>\n    </div>\n  )\n}\n\nexport default LoginPanel\n","import React from 'react'\nimport { useState } from 'react';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport LoggedIn from './LoggedIn';\nimport LoginPanel from './LogInPanel';\n\nconst auth = getAuth();\n\nfunction AuthPanel() {\n  const [loggedInUser, setLoggedInUser] = useState();\n  onAuthStateChanged(auth, (user) => {\n    if (user) {\n      // User is signed in, see docs for a list of available properties\n      // https://firebase.google.com/docs/reference/js/firebase.User\n      //const uid = user.uid;\n      setLoggedInUser(user);\n      // ...\n    } else {\n      // User is signed out\n      // ...\n      setLoggedInUser(null);\n    }\n  });\n\n  return (\n    <div>\n      {loggedInUser &&\n        <LoggedIn />\n      }\n      {(!loggedInUser) &&\n        <LoginPanel />\n      }\n\n    </div>\n  )\n}\n\nexport default AuthPanel\n","import './App.css';\n// Import the functions you need from the SDKs you need\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport ParkPanel from './ParkPanel';\nimport AuthPanel from './auth/AuthPanel';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <body>\n      <AuthPanel />\n          <ParkPanel />\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}